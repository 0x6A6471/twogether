open React
open Bindings

let[@react.component] make ~guest =
  let query_client = ReactQuery.useQueryClient () in
  let toast = useContext Ctx.Toast.toast_context in
  let is_open, set_is_open = useState (fun _ -> false) in
  let form_data, set_form_data = useState (fun _ -> guest) in
  let mutation = Api.Guests.Put.use_edit_mutation query_client in
  useEffect1
    (fun () ->
      match mutation.status with
      | `success ->
        toast.set_error (fun _ ->
          Some { message = "Guest updated"; severity = `success });
        None
      | `error ->
        toast.set_error (fun _ ->
          Some { message = "Unable to update guest"; severity = `error });
        None
      | _ -> None)
    [| mutation.status |];
  let handle_edit e =
    Event.Form.preventDefault e;
    mutation.mutate form_data [@u];
    set_is_open (fun _ -> false)
  in
  <Radix.Dialog.Root open_=is_open ?onOpenChange=(Some set_is_open)>
    <Radix.Dialog.Trigger asChild=false>
      <Ui.Button_tooltip label=("Edit "
                                ^ guest.first_name
                                ^ " "
                                ^ guest.last_name)
                         icon="edit" />
    </Radix.Dialog.Trigger>
    <Radix.Dialog.Portal>
      <Radix.Dialog.Overlay className="bg-gray-950/70 fixed inset-0" />
      <Radix.Dialog.Content className="fixed top-1/2 left-1/2 w-5/6 sm:w-4/5 \
                                       md:max-w-screen-sm -translate-x-1/2 \
                                       -translate-y-1/2 rounded-2xl bg-white \
                                       p-8 shadow-sm focus:outline-none \
                                       overflow-y-scroll">
        <Radix.Dialog.Title className="text-2xl font-semibold text-center \
                                       text-gray-950">
          (string "Add Guest")
        </Radix.Dialog.Title>
        <Radix.Dialog.Description className="mt-4 mb-8 text-center">
          (string "Enter the guest's information below.")
        </Radix.Dialog.Description>
        <form onSubmit=handle_edit>
          <div className="grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-6">
            <div className="sm:col-span-3">
              <label htmlFor="first-name"
                     className="block text-sm font-medium leading-6 \
                                text-gray-950">
                (string "First name")
              </label>
              <div>
                <input id="first-name"
                       type_="text"
                       name="first-name"
                       autoFocus=true
                       required=true
                       className="block w-full rounded-md border-0 py-1.5 \
                                  shadow-sm ring-1 ring-inset ring-gray-300 \
                                  placeholder:text-gray-400 focus:ring-inset \
                                  focus:ring-gray-400 sm:text-sm sm:leading-6"
                       defaultValue=guest.first_name
                       onChange=(fun e ->
                                  let value = (Event.Form.target e)##value in
                                  set_form_data (fun prev_data ->
                                    { prev_data with first_name = value })) />
              </div>
            </div>
            <div className="sm:col-span-3">
              <label htmlFor="last-name"
                     className="block text-sm font-medium leading-6 \
                                text-gray-950">
                (string "Last name")
              </label>
              <div>
                <input id="last-name"
                       type_="text"
                       name="last-name"
                       required=true
                       className="block w-full rounded-md border-0 py-1.5 \
                                  shadow-sm ring-1 ring-inset ring-gray-300 \
                                  placeholder:text-gray-400 focus:ring-inset \
                                  focus:ring-gray-400 sm:text-sm sm:leading-6"
                       defaultValue=guest.last_name
                       onChange=(fun e ->
                                  let value = (Event.Form.target e)##value in
                                  set_form_data (fun prev_data ->
                                    { prev_data with last_name = value })) />
              </div>
            </div>
            <div className="sm:col-span-4">
              <label htmlFor="street-address"
                     className="block text-sm font-medium leading-6 \
                                text-gray-950">
                (string "Street address")
              </label>
              <input id="street-address"
                     type_="text"
                     name="street-address"
                     required=true
                     defaultValue=guest.address_line_1
                     className="block w-full rounded-md border-0 py-1.5 \
                                shadow-sm ring-1 ring-inset ring-gray-300 \
                                placeholder:text-gray-400 focus:ring-inset \
                                focus:ring-gray-400 sm:text-sm sm:leading-6"
                     onChange=(fun e ->
                                let value = (Event.Form.target e)##value in
                                set_form_data (fun prev_data ->
                                  { prev_data with address_line_1 = value })) />
            </div>
            <div className="sm:col-span-2">
              <label htmlFor="street-address-2"
                     className="block text-sm font-medium leading-6 \
                                text-gray-950">
                (string "Apt, suite, etc.")
              </label>
              <input id="street-address-2"
                     type_="text"
                     name="street-address-2"
                     className="block w-full rounded-md border-0 py-1.5 \
                                shadow-sm ring-1 ring-inset ring-gray-300 \
                                placeholder:text-gray-400 focus:ring-inset \
                                focus:ring-gray-400 sm:text-sm sm:leading-6"
                     defaultValue=(match guest.address_line_2 with
                                   | Some line2 -> line2
                                   | None -> "")
                     onChange=(fun e ->
                                let value = (Event.Form.target e)##value in
                                set_form_data (fun prev_data ->
                                  { prev_data with address_line_2 = value })) />
            </div>
            <div className="sm:col-span-2 sm:col-start-1">
              <label htmlFor="city"
                     className="block text-sm font-medium leading-6 \
                                text-gray-950">
                (string "City")
              </label>
              <input id="city"
                     type_="text"
                     name="city"
                     required=true
                     className="block w-full rounded-md border-0 py-1.5 \
                                shadow-sm ring-1 ring-inset ring-gray-300 \
                                placeholder:text-gray-400 focus:ring-inset \
                                focus:ring-gray-400 sm:text-sm sm:leading-6"
                     defaultValue=guest.city
                     onChange=(fun e ->
                                let value = (Event.Form.target e)##value in
                                set_form_data (fun prev_data ->
                                  { prev_data with city = value })) />
            </div>
            <div className="sm:col-span-2">
              <label htmlFor="state"
                     className="block text-sm font-medium leading-6 \
                                text-gray-950">
                (string "State / Province")
              </label>
              <input id="state"
                     type_="text"
                     name="state"
                     required=true
                     className="block w-full rounded-md border-0 py-1.5 \
                                shadow-sm ring-1 ring-inset ring-gray-300 \
                                placeholder:text-gray-400 focus:ring-inset \
                                focus:ring-gray-400 sm:text-sm sm:leading-6"
                     defaultValue=guest.state
                     onChange=(fun e ->
                                let value = (Event.Form.target e)##value in
                                set_form_data (fun prev_data ->
                                  { prev_data with state = value })) />
            </div>
            <div className="sm:col-span-2">
              <label htmlFor="zip"
                     className="block text-sm font-medium leading-6 \
                                text-gray-950">
                (string "Postal code")
              </label>
              <input id="zip"
                     type_="text"
                     name="zip"
                     required=true
                     className="block w-full rounded-md border-0 py-1.5 \
                                shadow-sm ring-1 ring-inset ring-gray-300 \
                                placeholder:text-gray-400 focus:ring-inset \
                                focus:ring-gray-400 sm:text-sm sm:leading-6"
                     defaultValue=guest.zip
                     minLength=5
                     maxLength=5
                     onChange=(fun e ->
                                let value = (Event.Form.target e)##value in
                                set_form_data (fun prev_data ->
                                  { prev_data with zip = value })) />
            </div>
            <div className="sm:col-span-3">
              <label htmlFor="country"
                     className="block text-sm font-medium leading-6 \
                                text-gray-950">
                (string "Country")
              </label>
              <select id="country"
                      name="country"
                      required=true
                      className="block w-full rounded-md border-0 py-1.5 \
                                 shadow-sm ring-1 ring-inset ring-gray-300 \
                                 placeholder:text-gray-400 focus:ring-inset \
                                 focus:ring-gray-400 sm:text-sm sm:leading-6"
                      value=guest.country
                      onChange=(fun e ->
                                 let value = (Event.Form.target e)##value in
                                 set_form_data (fun prev_data ->
                                   { prev_data with country = value }))>
                <option value="" disabled=true>(string "Select one")</option>
                <option>(string "United States")</option>
                <option>(string "Canada")</option>
                <option>(string "Mexico")</option>
              </select>
            </div>
          </div>
          <div className="mt-8 flex justify-end">
            <button type_="submit"
                    className="rounded-xl bg-gray-950 px-3 py-2 text-sm \
                               font-medium text-white shadow-sm \
                               hover:bg-gray-900">
              <span>(string "Save")</span>
            </button>
          </div>
        </form>
        <Radix.Dialog.Close asChild=true>
          <button className="p-2 hover:bg-gray-50 absolute top-2 right-2 \
                             inline-flex items-center justify-center \
                             rounded-lg focus:outline-none">
            <Ui.Icon name="x" />
          </button>
        </Radix.Dialog.Close>
      </Radix.Dialog.Content>
    </Radix.Dialog.Portal>
  </Radix.Dialog.Root>
;;
